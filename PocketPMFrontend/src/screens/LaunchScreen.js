import React, { useState, useRef, useEffect } from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  ScrollView,
  StatusBar,
  Animated,
  Dimensions,
  Share,
  Linking,
  Alert,
} from 'react-native';
import { LinearGradient } from 'expo-linear-gradient';
import { BlurView } from 'expo-blur';
import { SafeAreaView } from 'react-native-safe-area-context';
import MaskedView from '@react-native-masked-view/masked-view';
import { Ionicons } from '@expo/vector-icons';

const { width, height } = Dimensions.get('window');

export default function LaunchScreen({ navigation, route }) {
  const { idea, analysis, usage } = route.params || {};
  const [loading, setLoading] = useState(false);
  
  // Animation values
  const logoGlow = useRef(new Animated.Value(0)).current;
  const floatingShapes = useRef([
    new Animated.Value(0),
    new Animated.Value(0),
    new Animated.Value(0),
  ]).current;
  const fadeAnim = useRef(new Animated.Value(0)).current;

  // Extract product name from idea for display
  const getProductName = (ideaText) => {
    if (!ideaText) return 'Your Product';
    const ideaParts = ideaText.split(':');
    if (ideaParts.length > 1) {
      return ideaParts[0].trim();
    }
    const words = ideaText.trim().split(' ');
    return words.slice(0, 3).join(' ') + (words.length > 3 ? '...' : '');
  };

  const productName = getProductName(idea);

  const exportOptions = [
    {
      id: 'pdf',
      name: 'Export to PDF',
      icon: 'document-text',
      description: 'Download comprehensive analysis report',
      color: '#ff6b6b',
      action: handlePDFExport
    },
    {
      id: 'prd',
      name: 'Draft PRD',
      icon: 'clipboard',
      description: 'Generate Product Requirements Document',
      color: '#4ecdc4',
      action: handlePRDDraft
    },
    {
      id: 'figma',
      name: 'UI Mockups',
      icon: 'color-palette',
      description: 'Create wireframes and mockups',
      color: '#45b7d1',
      action: handleUIMockups
    },
    {
      id: 'technical',
      name: 'Technical Specs',
      icon: 'code-slash',
      description: 'Generate technical documentation',
      color: '#96ceb4',
      action: handleTechnicalSpecs
    },
    {
      id: 'business',
      name: 'Business Plan',
      icon: 'trending-up',
      description: 'Create business model and projections',
      color: '#feca57',
      action: handleBusinessPlan
    },
    {
      id: 'marketing',
      name: 'Marketing Brief',
      icon: 'megaphone',
      description: 'Draft marketing strategy and materials',
      color: '#ff9ff3',
      action: handleMarketingBrief
    }
  ];

  useEffect(() => {
    // Start entrance animation
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 500,
      useNativeDriver: true,
    }).start();

    // Logo glow animation
    const logoAnimation = Animated.loop(
      Animated.sequence([
        Animated.timing(logoGlow, {
          toValue: 1,
          duration: 3000,
          useNativeDriver: false,
        }),
        Animated.timing(logoGlow, {
          toValue: 0,
          duration: 3000,
          useNativeDriver: false,
        }),
      ])
    );
    logoAnimation.start();

    // Floating shapes animation
    floatingShapes.forEach((anim, index) => {
      const floatingAnimation = Animated.loop(
        Animated.sequence([
          Animated.timing(anim, {
            toValue: 1,
            duration: 6000,
            useNativeDriver: true,
          }),
          Animated.timing(anim, {
            toValue: 0,
            duration: 6000,
            useNativeDriver: true,
          }),
        ])
      );
      setTimeout(() => floatingAnimation.start(), index * 2000);
    });

    return () => {
      logoAnimation.stop();
      floatingShapes.forEach(anim => anim.stopAnimation());
    };
  }, []);

  async function handlePDFExport() {
    setLoading(true);
    try {
      const shareContent = `🚀 Pocket PM Analysis Report\n\n💡 Product Idea:\n${idea}\n\n📊 Analysis:\n${analysis}\n\n📋 Report generated by Pocket PM - AI-powered product analysis\n\nReady to launch your idea!`;
      
      await Share.share({
        message: shareContent,
        title: 'Product Analysis Report - Pocket PM'
      });
    } catch (error) {
      console.error('PDF export failed:', error);
      Alert.alert('Export Failed', 'Unable to generate PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  async function handlePRDDraft() {
    const prdTemplate = `📋 PRODUCT REQUIREMENTS DOCUMENT\n\n🎯 Product Vision:\n${idea}\n\n📊 Market Analysis:\n${analysis.substring(0, 200)}...\n\n📋 Key Features:\n• [Feature 1]\n• [Feature 2]\n• [Feature 3]\n\n👥 Target Users:\n• [User Persona 1]\n• [User Persona 2]\n\n🔧 Technical Requirements:\n• [Tech Requirement 1]\n• [Tech Requirement 2]\n\n📈 Success Metrics:\n• [KPI 1]\n• [KPI 2]\n\nGenerated by Pocket PM`;

    try {
      await Share.share({
        message: prdTemplate,
        title: 'PRD Template - Pocket PM'
      });
    } catch (error) {
      console.error('PRD draft failed:', error);
    }
  }

  async function handleUIMockups() {
    Alert.alert(
      'UI Mockups',
      'Ready to create mockups? Choose your preferred design tool:',
      [
        { text: 'Figma', onPress: () => Linking.openURL('https://figma.com') },
        { text: 'Sketch', onPress: () => Linking.openURL('https://sketch.com') },
        { text: 'Adobe XD', onPress: () => Linking.openURL('https://adobe.com/products/xd') },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  }

  async function handleTechnicalSpecs() {
    const techSpecs = `⚙️ TECHNICAL SPECIFICATIONS\n\n🎯 Product: ${idea}\n\n🏗️ Architecture Overview:\n• Frontend: [Technology]\n• Backend: [Technology]\n• Database: [Technology]\n• API: [Technology]\n\n📱 Platform Requirements:\n• Web Application\n• Mobile App (iOS/Android)\n• API Integration\n\n🔒 Security Requirements:\n• User Authentication\n• Data Encryption\n• Privacy Compliance\n\n🚀 Deployment:\n• Cloud Infrastructure\n• CI/CD Pipeline\n• Monitoring & Analytics\n\nGenerated by Pocket PM`;

    try {
      await Share.share({
        message: techSpecs,
        title: 'Technical Specifications - Pocket PM'
      });
    } catch (error) {
      console.error('Technical specs failed:', error);
    }
  }

  async function handleBusinessPlan() {
    const businessPlan = `💼 BUSINESS PLAN OVERVIEW\n\n🎯 Product: ${idea}\n\n💰 Revenue Model:\n• [Revenue Stream 1]\n• [Revenue Stream 2]\n• [Revenue Stream 3]\n\n📊 Market Opportunity:\n• Market Size: $[X]M\n• Target Market: [Description]\n• Growth Rate: [X]%\n\n💵 Financial Projections (Year 1-3):\n• Year 1: $[X]K revenue\n• Year 2: $[X]K revenue\n• Year 3: $[X]K revenue\n\nGenerated by Pocket PM`;

    try {
      await Share.share({
        message: businessPlan,
        title: 'Business Plan - Pocket PM'
      });
    } catch (error) {
      console.error('Business plan failed:', error);
    }
  }

  async function handleMarketingBrief() {
    const marketingBrief = `📢 MARKETING STRATEGY BRIEF\n\n🎯 Product: ${idea}\n\n🎯 Target Audience:\n• [Primary Audience]\n• [Secondary Audience]\n\n📝 Key Messages:\n• [Message 1]\n• [Message 2]\n• [Message 3]\n\n📱 Marketing Channels:\n• Social Media\n• Content Marketing\n• Email Marketing\n• Paid Advertising\n\n📊 Campaign Goals:\n• Brand Awareness\n• Lead Generation\n• User Acquisition\n\nGenerated by Pocket PM`;

    try {
      await Share.share({
        message: marketingBrief,
        title: 'Marketing Brief - Pocket PM'
      });
    } catch (error) {
      console.error('Marketing brief failed:', error);
    }
  }

  const handleBackToAnalysis = () => {
    navigation.goBack();
  };

  const handleNewProject = () => {
    navigation.navigate('HomeMain');
  };

  return (
    <LinearGradient
      colors={['#0a0a0a', '#1a1a1a']}
      start={{x: 0, y: 0}}
      end={{x: 1, y: 1}}
      style={styles.container}
    >
      <StatusBar barStyle="light-content" />
      
      {/* Floating Background Elements */}
      {floatingShapes.map((anim, index) => (
        <Animated.View
          key={index}
          style={[
            styles.floatingShape,
            {
              transform: [{
                translateY: anim.interpolate({
                  inputRange: [0, 1],
                  outputRange: [0, -20],
                }),
              }, {
                rotate: anim.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['0deg', '180deg'],
                }),
              }],
            },
            index === 0 && styles.floatingShape1,
            index === 1 && styles.floatingShape2,
            index === 2 && styles.floatingShape3,
          ]}
        />
      ))}

      <SafeAreaView style={styles.safeArea}>
        <Animated.View style={[styles.content, { opacity: fadeAnim }]}>
          
          {/* Header */}
          <BlurView intensity={20} tint="dark" style={styles.header}>
            <TouchableOpacity 
              style={styles.backButton}
              onPress={handleBackToAnalysis}
            >
              <Ionicons name="arrow-back" size={24} color="white" />
            </TouchableOpacity>
            
            <Animated.View style={[
              styles.logo,
              {
                shadowColor: logoGlow.interpolate({
                  inputRange: [0, 1],
                  outputRange: ['rgba(78, 205, 196, 0.5)', 'rgba(255, 107, 107, 0.8)'],
                }),
              }
            ]}>
              <LinearGradient
                colors={['#ff6b6b', '#4ecdc4', '#45b7d1']}
                start={{x: 0, y: 0}}
                end={{x: 1, y: 1}}
                style={styles.logoIcon}
              >
                <Ionicons name="rocket" size={20} color="white" />
              </LinearGradient>
              <Text style={styles.logoText}>Launch</Text>
            </Animated.View>

            <TouchableOpacity 
              style={styles.newButton}
              onPress={handleNewProject}
            >
              <Ionicons name="add-circle-outline" size={24} color="white" />
            </TouchableOpacity>
          </BlurView>

          {/* Main Content */}
          <ScrollView
            style={styles.scrollView}
            contentContainerStyle={styles.scrollContent}
            showsVerticalScrollIndicator={false}
          >
            
            {/* Product Title */}
            <BlurView intensity={15} tint="dark" style={styles.titleContainer}>
              <MaskedView
                style={styles.titleMaskContainer}
                maskElement={
                  <Text style={styles.titleMask}>
                    Ready to Launch
                  </Text>
                }
              >
                <LinearGradient
                  colors={['#ff6b6b', '#4ecdc4']}
                  start={{x: 0, y: 0}}
                  end={{x: 1, y: 1}}
                  style={styles.titleGradient}
                />
              </MaskedView>
              <Text style={styles.subtitle}>{productName}</Text>
              <Text style={styles.description}>
                Transform your analysis into actionable deliverables
              </Text>
            </BlurView>

            {/* Export Options Grid */}
            <View style={styles.optionsGrid}>
              {exportOptions.map((option, index) => (
                <TouchableOpacity
                  key={option.id}
                  style={styles.optionCard}
                  onPress={option.action}
                  disabled={loading}
                >
                  <BlurView intensity={15} tint="dark" style={styles.optionBlur}>
                    <View style={[styles.optionIcon, { backgroundColor: option.color + '20' }]}>
                      <Ionicons name={option.icon} size={24} color={option.color} />
                    </View>
                    <Text style={styles.optionName}>{option.name}</Text>
                    <Text style={styles.optionDescription}>{option.description}</Text>
                  </BlurView>
                </TouchableOpacity>
              ))}
            </View>

            {/* Action Buttons */}
            <View style={styles.actionContainer}>
              <TouchableOpacity
                style={styles.actionButton}
                onPress={handleBackToAnalysis}
              >
                <BlurView intensity={15} tint="dark" style={styles.actionButtonBlur}>
                  <Ionicons name="analytics" size={20} color="#4ecdc4" />
                  <Text style={styles.actionButtonText}>Back to Analysis</Text>
                </BlurView>
              </TouchableOpacity>

              <TouchableOpacity
                style={styles.actionButton}
                onPress={handleNewProject}
              >
                <LinearGradient
                  colors={['#ff6b6b', '#4ecdc4']}
                  start={{x: 0, y: 0}}
                  end={{x: 1, y: 1}}
                  style={styles.actionButtonGradient}
                >
                  <Ionicons name="add-circle" size={20} color="white" />
                  <Text style={styles.actionButtonGradientText}>New Project</Text>
                </LinearGradient>
              </TouchableOpacity>
            </View>

          </ScrollView>
        </Animated.View>
      </SafeAreaView>
    </LinearGradient>
  );
}

const styles = {
  container: {
    flex: 1,
  },
  safeArea: {
    flex: 1,
  },
  content: {
    flex: 1,
  },
  // Floating background elements
  floatingShape: {
    position: 'absolute',
    opacity: 0.1,
  },
  floatingShape1: {
    top: '15%',
    left: '10%',
    width: 60,
    height: 60,
    backgroundColor: '#ff6b6b',
    borderRadius: 30,
  },
  floatingShape2: {
    top: '60%',
    right: '15%',
    width: 40,
    height: 40,
    backgroundColor: '#4ecdc4',
    borderRadius: 8,
  },
  floatingShape3: {
    bottom: '20%',
    left: '20%',
    width: 80,
    height: 80,
    backgroundColor: '#45b7d1',
    borderRadius: 40,
  },
  // Header
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: 'rgba(255,255,255,0.1)',
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  logo: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 8,
  },
  logoIcon: {
    width: 32,
    height: 32,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
  },
  logoText: {
    color: 'white',
    fontSize: 18,
    fontWeight: '700',
    letterSpacing: -0.5,
  },
  newButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  // Content
  scrollView: {
    flex: 1,
  },
  scrollContent: {
    padding: 20,
    paddingBottom: 40,
  },
  // Title
  titleContainer: {
    padding: 24,
    borderRadius: 20,
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
    marginBottom: 24,
  },
  titleMaskContainer: {
    height: 40,
    marginBottom: 8,
  },
  titleMask: {
    fontSize: 28,
    fontWeight: '700',
    textAlign: 'center',
    backgroundColor: 'transparent',
  },
  titleGradient: {
    flex: 1,
  },
  subtitle: {
    color: 'white',
    fontSize: 20,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 8,
  },
  description: {
    color: 'rgba(255,255,255,0.7)',
    fontSize: 16,
    textAlign: 'center',
    lineHeight: 22,
  },
  // Options Grid
  optionsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    gap: 12,
    marginBottom: 24,
  },
  optionCard: {
    width: (width - 52) / 2, // Account for padding and gap
    borderRadius: 16,
    overflow: 'hidden',
  },
  optionBlur: {
    padding: 20,
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.2)',
    alignItems: 'center',
    minHeight: 140,
  },
  optionIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    marginBottom: 12,
  },
  optionName: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
    textAlign: 'center',
    marginBottom: 6,
  },
  optionDescription: {
    color: 'rgba(255,255,255,0.7)',
    fontSize: 12,
    textAlign: 'center',
    lineHeight: 16,
  },
  // Actions
  actionContainer: {
    flexDirection: 'row',
    gap: 12,
    marginTop: 8,
  },
  actionButton: {
    flex: 1,
    borderRadius: 12,
    overflow: 'hidden',
  },
  actionButtonBlur: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 16,
    paddingHorizontal: 20,
    borderWidth: 1,
    borderColor: 'rgba(255,255,255,0.2)',
  },
  actionButtonText: {
    color: 'rgba(255,255,255,0.8)',
    fontSize: 16,
    fontWeight: '500',
  },
  actionButtonGradient: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 16,
    paddingHorizontal: 20,
  },
  actionButtonGradientText: {
    color: 'white',
    fontSize: 16,
    fontWeight: '600',
  },
}; 