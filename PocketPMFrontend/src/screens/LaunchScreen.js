import React, { useState } from 'react';
import {
  View,
  StyleSheet,
  ScrollView,
  Text,
  SafeAreaView,
  TouchableOpacity,
  Share,
  Linking,
  Alert,
  Dimensions,
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import * as Animatable from 'react-native-animatable';
import { useTheme } from '../contexts/ThemeContext';

const { width } = Dimensions.get('window');

export default function LaunchScreen({ navigation, route }) {
  const { colors, styles: themeStyles, isDarkMode } = useTheme();
  const { idea, analysis, usage } = route.params || {};
  const [loading, setLoading] = useState(false);

  const exportOptions = [
    {
      id: 'pdf',
      name: 'Export to PDF',
      icon: 'document-text',
      description: 'Download a comprehensive analysis report as PDF',
      color: '#ef4444',
      action: handlePDFExport
    },
    {
      id: 'prd',
      name: 'Draft PRD',
      icon: 'clipboard',
      description: 'Generate a Product Requirements Document template',
      color: '#3b82f6',
      action: handlePRDDraft
    },
    {
      id: 'figma',
      name: 'UI Mockups',
      icon: 'color-palette',
      description: 'Create wireframes and mockups in Figma or similar tools',
      color: '#8b5cf6',
      action: handleUIMockups
    },
    {
      id: 'technical',
      name: 'Technical Specs',
      icon: 'code-slash',
      description: 'Generate technical documentation for dev team',
      color: '#10b981',
      action: handleTechnicalSpecs
    },
    {
      id: 'business',
      name: 'Business Plan',
      icon: 'trending-up',
      description: 'Create business model and financial projections',
      color: '#f59e0b',
      action: handleBusinessPlan
    },
    {
      id: 'marketing',
      name: 'Marketing Brief',
      icon: 'megaphone',
      description: 'Draft marketing strategy and campaign materials',
      color: '#ec4899',
      action: handleMarketingBrief
    }
  ];

  async function handlePDFExport() {
    setLoading(true);
    try {
      // In a real app, you'd integrate with a PDF generation service
      const shareContent = `🚀 Pocket PM Analysis Report\n\n💡 Product Idea:\n${idea}\n\n📊 Analysis:\n${analysis}\n\n📋 Report generated by Pocket PM - AI-powered product analysis\n\nReady to launch your idea!`;
      
      await Share.share({
        message: shareContent,
        title: 'Product Analysis Report - Pocket PM'
      });
    } catch (error) {
      console.error('PDF export failed:', error);
      Alert.alert('Export Failed', 'Unable to generate PDF. Please try again.');
    } finally {
      setLoading(false);
    }
  }

  async function handlePRDDraft() {
    const prdTemplate = `📋 PRODUCT REQUIREMENTS DOCUMENT

🎯 Product Vision:
${idea}

📊 Market Analysis:
${analysis.substring(0, 200)}...

📋 Key Features:
• [Feature 1]
• [Feature 2] 
• [Feature 3]

👥 Target Users:
• [User Persona 1]
• [User Persona 2]

🔧 Technical Requirements:
• [Tech Requirement 1]
• [Tech Requirement 2]

📈 Success Metrics:
• [KPI 1]
• [KPI 2]

Generated by Pocket PM`;

    try {
      await Share.share({
        message: prdTemplate,
        title: 'PRD Template - Pocket PM'
      });
    } catch (error) {
      console.error('PRD draft failed:', error);
    }
  }

  async function handleUIMockups() {
    Alert.alert(
      'UI Mockups',
      'Ready to create mockups? Choose your preferred design tool:',
      [
        { text: 'Figma', onPress: () => Linking.openURL('https://figma.com') },
        { text: 'Sketch', onPress: () => Linking.openURL('https://sketch.com') },
        { text: 'Adobe XD', onPress: () => Linking.openURL('https://adobe.com/products/xd') },
        { text: 'Cancel', style: 'cancel' }
      ]
    );
  }

  async function handleTechnicalSpecs() {
    const techSpecs = `⚙️ TECHNICAL SPECIFICATIONS

🎯 Product: ${idea}

🏗️ Architecture Overview:
• Frontend: [Technology]
• Backend: [Technology]
• Database: [Technology]
• API: [Technology]

📱 Platform Requirements:
• Web Application
• Mobile App (iOS/Android)
• API Integration

🔒 Security Requirements:
• User Authentication
• Data Encryption
• Privacy Compliance

🚀 Deployment:
• Cloud Infrastructure
• CI/CD Pipeline
• Monitoring & Analytics

Generated by Pocket PM`;

    try {
      await Share.share({
        message: techSpecs,
        title: 'Technical Specifications - Pocket PM'
      });
    } catch (error) {
      console.error('Technical specs failed:', error);
    }
  }

  async function handleBusinessPlan() {
    const businessPlan = `💼 BUSINESS PLAN OVERVIEW

🎯 Product: ${idea}

💰 Revenue Model:
• [Revenue Stream 1]
• [Revenue Stream 2]
• [Revenue Stream 3]

📊 Market Opportunity:
• Market Size: $[X]M
• Target Market: [Description]
• Growth Rate: [X]%

💵 Financial Projections (Year 1-3):
• Year 1: $[X]K revenue
• Year 2: $[X]K revenue  
• Year 3: $[X]M revenue

🎯 Go-to-Market Strategy:
• Launch Phase: [Strategy]
• Growth Phase: [Strategy]
• Scale Phase: [Strategy]

Generated by Pocket PM`;

    try {
      await Share.share({
        message: businessPlan,
        title: 'Business Plan - Pocket PM'
      });
    } catch (error) {
      console.error('Business plan failed:', error);
    }
  }

  async function handleMarketingBrief() {
    const marketingBrief = `📢 MARKETING STRATEGY BRIEF

🎯 Product: ${idea}

👥 Target Audience:
• Primary: [Demographic]
• Secondary: [Demographic]
• Personas: [User Types]

🎨 Brand Positioning:
• Value Proposition: [Key Message]
• Unique Selling Points: [USPs]
• Brand Voice: [Tone & Style]

📱 Marketing Channels:
• Digital: Social Media, SEO, PPC
• Content: Blog, Video, Podcasts
• Partnerships: Influencers, Affiliates

📊 Campaign Metrics:
• Awareness: [Metrics]
• Acquisition: [Metrics]
• Retention: [Metrics]

Generated by Pocket PM`;

    try {
      await Share.share({
        message: marketingBrief,
        title: 'Marketing Strategy - Pocket PM'
      });
    } catch (error) {
      console.error('Marketing brief failed:', error);
    }
  }

  const handleBackToAnalysis = () => {
    navigation.goBack();
  };

  const handleNewProject = () => {
    navigation.navigate('HomeMain');
  };

  return (
    <SafeAreaView style={[styles.container, { backgroundColor: isDarkMode ? colors.background : '#f8f9fa' }]}>
      <ScrollView
        style={styles.scrollView}
        showsVerticalScrollIndicator={false}
      >
        {/* Header */}
        <View style={[styles.header, { backgroundColor: isDarkMode ? colors.surface : '#ffffff', borderBottomColor: isDarkMode ? colors.border : '#e5e7eb' }]}>
          <View style={styles.headerLeft}>
            <TouchableOpacity onPress={handleBackToAnalysis} style={styles.backButton} activeOpacity={0.7}>
              <Ionicons name="arrow-back" size={24} color={isDarkMode ? colors.text : '#111827'} />
            </TouchableOpacity>
            <View style={styles.logoContainer}>
              <View style={styles.logo}>
                <Ionicons name="rocket" size={24} color="#ffffff" />
                <View style={styles.sparkles}>
                  <Ionicons name="sparkles" size={12} color="#ffffff" />
                </View>
              </View>
            </View>
            <View style={styles.titleContainer}>
              <Text style={[styles.title, { color: isDarkMode ? colors.text : '#111827' }]}>Launch Ready</Text>
              <Text style={[styles.subtitle, { color: isDarkMode ? colors.textSecondary : '#6b7280' }]}>
                Export and share your project materials
              </Text>
            </View>
          </View>
          <View style={styles.headerRight}>
            <TouchableOpacity style={styles.iconButton} onPress={handleNewProject} activeOpacity={0.7}>
              <Ionicons name="add-outline" size={20} color={isDarkMode ? colors.textSecondary : '#6b7280'} />
            </TouchableOpacity>
          </View>
        </View>

        {/* Main Content */}
        <View style={styles.mainContent}>
          {/* Progress Steps */}
          <Animatable.View animation="fadeInUp" duration={800} delay={200}>
            <View style={styles.progressSteps}>
              {/* Idea Step - Completed */}
              <View style={styles.step}>
                <View style={[styles.stepIcon, styles.stepIconCompleted]}>
                  <Ionicons name="checkmark" size={32} color="#ffffff" />
                </View>
                <Text style={[styles.stepLabel, styles.stepLabelCompleted]}>Idea</Text>
              </View>

              {/* Analysis Step - Completed */}
              <View style={styles.step}>
                <View style={[styles.stepIcon, styles.stepIconCompleted]}>
                  <Ionicons name="checkmark" size={32} color="#ffffff" />
                </View>
                <Text style={[styles.stepLabel, styles.stepLabelCompleted]}>Analysis</Text>
              </View>

              {/* Launch Step - Active */}
              <View style={[styles.step, styles.stepActive]}>
                <View style={[styles.stepIcon, styles.stepIconActive]}>
                  <Ionicons name="rocket" size={32} color="#ffffff" />
                </View>
                <Text style={[styles.stepLabel, styles.stepLabelActive]}>Launch</Text>
              </View>
            </View>
          </Animatable.View>

          {/* Launch Header */}
          <Animatable.View animation="fadeInUp" duration={800} delay={400}>
            <View style={styles.launchHeader}>
              <Text style={styles.launchEmoji}>🚀</Text>
              <Text style={[styles.launchTitle, { color: isDarkMode ? colors.text : '#111827' }]}>
                Ready to Launch!
              </Text>
              <Text style={[styles.launchSubtitle, { color: isDarkMode ? colors.textSecondary : '#6b7280' }]}>
                Your idea has been analyzed. Now let's turn insights into action with professional documents and resources.
              </Text>
            </View>
          </Animatable.View>

          {/* Export Options Grid */}
          <Animatable.View animation="fadeInUp" duration={800} delay={600}>
            <View style={styles.exportGrid}>
              <Text style={[styles.gridTitle, { color: isDarkMode ? colors.text : '#111827' }]}>
                📋 Export & Share Options
              </Text>
              
              {exportOptions.map((option, index) => (
                <Animatable.View
                  key={option.id}
                  animation="fadeInUp"
                  duration={600}
                  delay={800 + (index * 100)}
                >
                  <TouchableOpacity
                    style={[
                      styles.exportCard,
                      { 
                        backgroundColor: isDarkMode ? colors.surface : '#ffffff',
                        borderLeftColor: option.color
                      }
                    ]}
                    onPress={option.action}
                    activeOpacity={0.8}
                    disabled={loading}
                  >
                    <View style={styles.exportCardHeader}>
                      <View style={[styles.exportIcon, { backgroundColor: option.color + '15' }]}>
                        <Ionicons name={option.icon} size={24} color={option.color} />
                      </View>
                      <View style={styles.exportCardTitle}>
                        <Text style={[styles.exportCardName, { color: isDarkMode ? colors.text : '#111827' }]}>
                          {option.name}
                        </Text>
                        <Text style={[styles.exportCardDescription, { color: isDarkMode ? colors.textSecondary : '#6b7280' }]}>
                          {option.description}
                        </Text>
                      </View>
                      <Ionicons name="chevron-forward" size={20} color={isDarkMode ? colors.textSecondary : '#9ca3af'} />
                    </View>
                  </TouchableOpacity>
                </Animatable.View>
              ))}
            </View>
          </Animatable.View>

          {/* Action Buttons */}
          <Animatable.View animation="fadeInUp" duration={800} delay={1200}>
            <View style={styles.actionButtons}>
              <TouchableOpacity
                style={[styles.secondaryButton, { borderColor: isDarkMode ? colors.border : '#d1d5db' }]}
                onPress={handleBackToAnalysis}
                activeOpacity={0.8}
              >
                <Ionicons name="arrow-back" size={20} color={isDarkMode ? colors.text : '#374151'} />
                <Text style={[styles.secondaryButtonText, { color: isDarkMode ? colors.text : '#374151' }]}>
                  Back to Analysis
                </Text>
              </TouchableOpacity>
              
              <TouchableOpacity
                style={[styles.primaryButton, { backgroundColor: '#ef4444' }]}
                onPress={handleNewProject}
                activeOpacity={0.8}
              >
                <Ionicons name="add" size={20} color="#ffffff" />
                <Text style={styles.primaryButtonText}>New Project</Text>
              </TouchableOpacity>
            </View>
          </Animatable.View>
        </View>

        {/* Footer */}
        <View style={styles.footer}>
          <Text style={[styles.footerText, { color: isDarkMode ? colors.textSecondary : '#6b7280' }]}>
            Powered by OpenAI • Made with <Text style={styles.heart}>❤️</Text> for Product Innovators
          </Text>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  scrollView: {
    flex: 1,
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'space-between',
    paddingHorizontal: 24,
    paddingVertical: 16,
    borderBottomWidth: 1,
  },
  headerLeft: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
    flex: 1,
  },
  backButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  logoContainer: {
    position: 'relative',
  },
  logo: {
    width: 48,
    height: 48,
    backgroundColor: '#ef4444',
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
    position: 'relative',
  },
  sparkles: {
    position: 'absolute',
    top: -4,
    right: -4,
  },
  titleContainer: {
    flexDirection: 'column',
    flex: 1,
  },
  title: {
    fontSize: 24,
    fontWeight: '700',
    fontFamily: 'System',
  },
  subtitle: {
    fontSize: 14,
    fontWeight: '400',
    fontFamily: 'System',
  },
  headerRight: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 12,
  },
  iconButton: {
    width: 40,
    height: 40,
    borderRadius: 20,
    justifyContent: 'center',
    alignItems: 'center',
  },
  mainContent: {
    maxWidth: 1024,
    width: '100%',
    alignSelf: 'center',
    paddingHorizontal: 24,
    paddingVertical: 48,
  },
  progressSteps: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 32,
    marginBottom: 48,
  },
  step: {
    flexDirection: 'column',
    alignItems: 'center',
    gap: 12,
  },
  stepActive: {
    // Active step styling
  },
  stepIcon: {
    width: 64,
    height: 64,
    backgroundColor: '#9ca3af',
    borderRadius: 32,
    justifyContent: 'center',
    alignItems: 'center',
  },
  stepIconActive: {
    backgroundColor: '#ef4444',
  },
  stepIconCompleted: {
    backgroundColor: '#22c55e',
  },
  stepLabel: {
    fontWeight: '500',
    color: '#9ca3af',
    fontFamily: 'System',
  },
  stepLabelActive: {
    color: '#111827',
  },
  stepLabelCompleted: {
    color: '#22c55e',
  },
  launchHeader: {
    alignItems: 'center',
    marginBottom: 48,
  },
  launchEmoji: {
    fontSize: 80,
    marginBottom: 16,
  },
  launchTitle: {
    fontSize: 32,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 16,
    fontFamily: 'System',
  },
  launchSubtitle: {
    fontSize: 18,
    textAlign: 'center',
    lineHeight: 28,
    maxWidth: 600,
    fontFamily: 'System',
  },
  exportGrid: {
    marginBottom: 32,
  },
  gridTitle: {
    fontSize: 24,
    fontWeight: '700',
    textAlign: 'center',
    marginBottom: 32,
    fontFamily: 'System',
  },
  exportCard: {
    padding: 20,
    borderRadius: 16,
    marginBottom: 16,
    borderLeftWidth: 4,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  exportCardHeader: {
    flexDirection: 'row',
    alignItems: 'center',
    gap: 16,
  },
  exportIcon: {
    width: 48,
    height: 48,
    borderRadius: 24,
    justifyContent: 'center',
    alignItems: 'center',
  },
  exportCardTitle: {
    flex: 1,
  },
  exportCardName: {
    fontSize: 18,
    fontWeight: '600',
    marginBottom: 4,
    fontFamily: 'System',
  },
  exportCardDescription: {
    fontSize: 14,
    lineHeight: 20,
    fontFamily: 'System',
  },
  actionButtons: {
    flexDirection: 'row',
    gap: 16,
    marginBottom: 32,
  },
  secondaryButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
    borderWidth: 1,
  },
  secondaryButtonText: {
    fontSize: 16,
    fontWeight: '500',
    fontFamily: 'System',
  },
  primaryButton: {
    flex: 1,
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8,
    paddingVertical: 16,
    paddingHorizontal: 24,
    borderRadius: 12,
  },
  primaryButtonText: {
    color: '#ffffff',
    fontSize: 16,
    fontWeight: '500',
    fontFamily: 'System',
  },
  footer: {
    textAlign: 'center',
    paddingVertical: 32,
    alignItems: 'center',
  },
  footerText: {
    fontSize: 14,
    textAlign: 'center',
    fontFamily: 'System',
  },
  heart: {
    color: '#ef4444',
  },
}); 